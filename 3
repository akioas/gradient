import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Lambda
from tensorflow.keras.initializers import RandomUniform
from tensorflow.keras.optimizers import SGD
import tensorflow.keras.backend as K
from sklearn.preprocessing import MinMaxScaler

# Входной вектор и эталонный выход
X = np.array([[0.4, -0.7, 1.3]])
Y = np.array([[0.3, -0.5, 0.8]])

# Модель 3-4-3
model = Sequential()
model.add(Dense(4, input_dim=3, activation='sigmoid',
                kernel_initializer=RandomUniform(-0.3, 0.3)))
model.add(Dense(3))
model.add(Lambda(lambda x: 1.3 * K.sigmoid(x) - 0.5))
# значения сигмоида от -1 до 1

# обратное распространение ошибки c помощью градиентного спуска
optimizer = SGD(learning_rate=0.4)

model.compile(optimizer=optimizer, loss='mean_squared_error')
model.fit(X, Y, epochs=10, verbose=1)
loss = model.evaluate(X, Y)
print("Loss:", loss)



###########################################


from tensorflow.keras.datasets import fashion_mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.utils import to_categorical



(x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()
x_train = x_train.reshape(x_train.shape[0], -1) / 255.0
x_test = x_test.reshape(x_test.shape[0], -1) / 255.0
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)
model = Sequential()
model.add(Dense(10, input_dim=784, activation='relu'))
model.add(Dense(10, activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(x_train, y_train, epochs=10, validation_split=0.1)
_, test_acc = model.evaluate(x_test, y_test)
print(test_acc)#0.8396
#Один скрытый слой с 10 нейронами
#Можно добавить скрытый слой или сделать больше нейронов


model = Sequential()
model.add(Dense(50, input_dim=784, activation='relu'))
model.add(Dense(10, activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(x_train, y_train, epochs=10, validation_split=0.1)
_, test_acc = model.evaluate(x_test, y_test)
print(test_acc)#0.8707
#Один скрытый слой с 50 нейронами
#Можно добавить скрытый слой

model = Sequential()
model.add(Dense(50, input_dim=784, activation='relu'))
model.add(Dense(50, activation='relu'))
model.add(Dense(10, activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(x_train, y_train, epochs=10, validation_split=0.1)
_, test_acc = model.evaluate(x_test, y_test)
print(test_acc)#0.8691
#Два скрытых слоя. Случилось переобучение, можно отключить часть нейронов

#Сверточная нейронная сеть
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten
import numpy as np
(x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()
x_train = x_train[:,:,:,np.newaxis] / 255.0
x_test = x_test[:,:,:,np.newaxis] / 255.0
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)
model = Sequential()
model.add(Conv2D(filters=64, kernel_size=2, padding='same', activation='relu', input_shape=(28,28, 1)))
model.add(MaxPooling2D(pool_size=2))
model.add(Flatten())
model.add(Dense(10, activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(x_train, y_train, epochs=10, validation_split=0.1)
_, test_acc = model.evaluate(x_test, y_test)
print(test_acc)#0.8987 
# Самое большое время выполнения, обнаруживает образ на изображениях лучше всего
# Можно увеличить epochs

